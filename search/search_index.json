{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Infraestrutura por C\u00f3digo - Aplica\u00e7\u00e3o em Python para gerenciar infraestrutura constru\u00edda com Terraform \u00b6 Aluno: Francisco Pinheiro Janela Curso: Engenharia da Computa\u00e7\u00e3o Semestre: 6 Contato: franciscopj@al.insper.edu.br Ano: 2022 Como Operar com o meu programa: \u00b6 Warning O programa foi desenvolvido por uma \u00fanica pessoa, e existem algumas falhas na robustez da utiliza\u00e7\u00e3o, ou seja, \u00e9 da responsabilidade do usu\u00e1rio configurar adequadamente os campos durante a utiliza\u00e7\u00e3o para que a montagem n\u00e3o falhe. Ademais, aproveito para lembrar a import\u00e2ncia da prote\u00e7\u00e3o de suas chaves de acesso , utilize-as apenas em vari\u00e1veis de ambiente. Esta aplica\u00e7\u00e3o utiliza a cria\u00e7\u00e3o de um arquivo .env para armazen\u00e1-las. Mais sobre isso na aba de Pr\u00e9-Requisitos. Pr\u00e9-requisitos \u00b6 Para come\u00e7ar a operar com o meu programa, sigam o passo a passo indicado no readme do meu reposit\u00f3rio no github. Como usar \u00b6 Ao iniciar o programa pela primeira vez, o usu\u00e1rio se depara com a escolha entre a configura\u00e7\u00e3o das regi\u00f5es, podendo, nesse caminho, gerenciar inst\u00e2ncias, gerenciar security groups e levantar aplica\u00e7\u00f5es em HA (High Availability), e a configura\u00e7\u00e3o do ambiente do IAM, onde o usu\u00e1rio pode gerenciar usu\u00e1rios e pol\u00edticas(restri\u00e7\u00f5es). Para facilitar, a \u00e1rvore de navega\u00e7\u00e3o abaixo, pode trazer mais facilidade para o usu\u00e1rio se encontrar pelo programa: \u251c\u2500\u2500 Configura\u00e7\u00e3o de Regi\u00f5es \u2502 \u251c\u2500\u2500 Criar, deletar ou escolher uma regi\u00e3o \u2502 \u251c\u2500\u2500 Gerenciar Inst\u00e2ncias \u2502 \u2502 \u251c\u2500\u2500 Listar Inst\u00e2ncias \u2502 \u2502 \u251c\u2500\u2500 Criar Inst\u00e2ncia \u2502 \u2502 \u251c\u2500\u2500 Deletar Inst\u00e2ncia \u2502 \u2502 \u251c\u2500\u2500 Atualizar Configura\u00e7\u00e3o de uma Inst\u00e2ncia \u2502 \u2502 \u2514\u2500\u2500 Voltar \u2502 \u251c\u2500\u2500 Gerenciar Security Groups \u2502 \u2502 \u251c\u2500\u2500 Listar Security Groups \u2502 \u2502 \u251c\u2500\u2500 Criar Security Group \u2502 \u2502 \u251c\u2500\u2500 Deletar Security Group \u2502 \u2502 \u251c\u2500\u2500 Adicionar Regras a um Security Group \u2502 \u2502 \u251c\u2500\u2500 Deletar Regras de um Security Group \u2502 \u2502 \u2514\u2500\u2500 Voltar \u2502 \u2514\u2500\u2500 Gerenciar Aplica\u00e7\u00e3o em HA \u2502 \u251c\u2500\u2500 Listar Aplica\u00e7\u00e3o em HA \u2502 \u251c\u2500\u2500 Criar Aplica\u00e7\u00e3o em HA \u2502 \u251c\u2500\u2500 Deletar Aplica\u00e7\u00e3o em HA \u2502 \u2514\u2500\u2500 Voltar \u251c\u2500\u2500 Configura\u00e7\u00e3o do IAM \u2502 \u251c\u2500\u2500 Limpar ou Restaurar a Infraestrutura do IAM \u2502 \u251c\u2500\u2500 Gerenciar Usu\u00e1rios \u2502 \u2502 \u251c\u2500\u2500 Listar Usu\u00e1rios \u2502 \u2502 \u251c\u2500\u2500 Criar Usu\u00e1rio \u2502 \u2502 \u251c\u2500\u2500 Deletar Usu\u00e1rio \u2502 \u2502 \u251c\u2500\u2500 Adicionar Pol\u00edticas a um Usu\u00e1rio \u2502 \u2502 \u251c\u2500\u2500 Deletar Pol\u00edticas de um Usu\u00e1rio \u2502 \u2502 \u2514\u2500\u2500 Voltar \u2502 \u2514\u2500\u2500 Gerenciar Pol\u00edticas \u2502 \u251c\u2500\u2500 Listar Pol\u00edticas \u2502 \u251c\u2500\u2500 Importar Pol\u00edtica \u2502 \u2514\u2500\u2500 Voltar \u251c\u2500\u2500 Listar todas as Inst\u00e2ncias \u2514\u2500\u2500 Sair Em sua maioria, as instru\u00e7\u00f5es de uso de cada uma das funcionalidades est\u00e1 autocontida no pr\u00f3prio programa, mas existem algumas considera\u00e7\u00f5es que podem ser feitas: Configura\u00e7\u00e3o de Regi\u00f5es \u00b6 Criar, deletar ou escolher uma regi\u00e3o \u00b6 Ao criar uma regi\u00e3o em um uma daquelas dispon\u00edveis no programa, garanta que a sua conta possua permiss\u00f5es para faz\u00ea-lo, pois isso pode gerar um problema para o bom funcionamento da aplica\u00e7\u00e3o. Ao criar uma nova regi\u00e3o, autom\u00e1ticamente a infraestrutura b\u00e1sica \u00e9 copiada da pasta de sample para uma com o nome da regi\u00e3o, com a adi\u00e7\u00e3o do prefixo tf- . Ao escolher a op\u00e7\u00e3o de deletar uma regi\u00e3o, n\u00e3o existe confirma\u00e7\u00e3o necess\u00e1ria, e se o comando for executado, a regi\u00e3o ser\u00e1 deletada, ou seja, ir\u00e1 perder todos os recursos criados naquela regi\u00e3o de uma vez. Portanto, \u00e9 importante que o usu\u00e1rio tenha certeza de que deseja deletar a regi\u00e3o. Gerenciar Inst\u00e2ncias \u00b6 Ao Listar as Inst\u00e2ncias, o usu\u00e1rio deve escolher pelo n\u00famero mostrado na tela aquela que quer visualizar mais informa\u00e7\u00f5es. Ao Criar uma Inst\u00e2ncia, o usu\u00e1rio deve escolher o tipo de inst\u00e2ncia que deseja criar, e o nome da inst\u00e2ncia que deseja criar. O nome da inst\u00e2ncia deve ser \u00fanico, ou seja, n\u00e3o pode haver duas inst\u00e2ncias com o mesmo nome na mesma regi\u00e3o. Al\u00e9m disso, o n\u00famero de inst\u00e2ncias olocado \u00e9 a quantidade de r\u00e9plicas aquelas configura\u00e7\u00f5es que ir\u00e3o ser criadas. Por fim, o Sistema Operacional pr\u00e9 definido \u00e9 o Ubuntu Server 18.04 LTS . Warning O usu\u00e1rio deve ter criado previamente seu par de chaves na AWS para poder indic\u00e1-lo na cria\u00e7\u00e3o de uma inst\u00e2ncia e, por sua vez, poder acess\u00e1-lo via ssh posteriormente. Ao atualizar a configura\u00e7\u00e3o de uma inst\u00e2ncia estar\u00e1 mudando todas as r\u00e9plicas criadas. Quando for feita a mudan\u00e7a de n\u00famero de inst\u00e2ncias, ser\u00e1 sempre a com \u00edndice maior que ser\u00e1 deletada. Ao mudar os ids dos security groups, dever\u00e1 passar novamente todos aqueles que desejar aplicar \u00e0 inst\u00e2ncia, configura\u00e7\u00f5es antigas ser\u00e3o perdidas. Gerenciar Security Groups \u00b6 Ao Listar os Security Groups, o usu\u00e1rio deve escolher pelo n\u00famero mostrado na tela aquele que quer visualizar mais informa\u00e7\u00f5es. Ao Criar um Security Group, o usu\u00e1rio deve escolher o nome do Security Group que deseja criar. O nome do Security Group deve ser \u00fanico, ou seja, n\u00e3o pode haver dois Security Groups com o mesmo nome na mesma regi\u00e3o. Al\u00e9m disso, poder\u00e1 ser criado quantas regras de Ingress e Egress que o usu\u00e1rio desejar, se atentando somente \u00e0 libera\u00e7\u00e3o de todas as portas para n\u00e3o correr riscos de seguran\u00e7a. S\u00f3 ser\u00e1 poss\u00edvel deletar um Security Group se ele n\u00e3o estiver sendo usado, ou seja, se quiser delet\u00e1-lo, deve remover todas as depend\u00eancias dele nas inst\u00e2ncias da regi\u00e3o. Gerenciar Aplica\u00e7\u00e3o em HA \u00b6 Em primeiro lugar, a Aplica\u00e7\u00e3o em HA \u00e9 uma demo com funcionamento limitado, que permite a cria\u00e7\u00e3o de uma aplica\u00e7\u00e3o predefinida e utiliza sistemas de Auto Scalling e Load Balancing dispon\u00edveis na AWS. S\u00f3 \u00e9 poss\u00edvel criar em duas regi\u00f5es: us-east-1 e us-east-2 . S\u00f3 pode ser criada uma aplica\u00e7\u00e3o em HA por regi\u00e3o, ou seja, se j\u00e1 houver uma aplica\u00e7\u00e3o em HA criada na regi\u00e3o, n\u00e3o ser\u00e1 poss\u00edvel criar outra. Para pegar a URL da aplica\u00e7\u00e3o e poder acess\u00e1-la, basta listar a aplica\u00e7\u00e3o no programa. Configura\u00e7\u00e3o do IAM \u00b6 Limpar ou Restaurar a Infraestrutura do IAM \u00b6 Limpar a infraestrutura do IAM significa apagar todas as configura\u00e7\u00f5es pr\u00e9 criadas para usu\u00e1rios, mas todos as pol\u00edticas importadas continuar\u00e3o sendo criadas quando for restaurada a infraestrutura. A Infraestrutura vem configurada com 4 pol\u00edticas de teste: AdministratorAccess , AdminNorthVirginia , AdminOregon e AdminOhio . Essas pol\u00edticas s\u00e3o criadas automaticamente quando a infraestrutura \u00e9 restaurada, e n\u00e3o podem ser deletadas. Gerenciar Usu\u00e1rios \u00b6 Ao Listar os Usu\u00e1rios, desta vez o usu\u00e1rio n\u00e3o precisa escolher pelo n\u00famero mostrado na tela, pois o programa j\u00e1 ir\u00e1 mostrar as informa\u00e7\u00f5es de todos os usu\u00e1rios e todas as pol\u00edticas atreladas a eles. Ao Criar um Usu\u00e1rio, o usu\u00e1rio deve escolher o nome do Usu\u00e1rio que deseja criar. O nome do Usu\u00e1rio deve ser \u00fanico, ou seja, n\u00e3o pode haver dois Usu\u00e1rios com o mesmo nome na mesma regi\u00e3o. Al\u00e9m disso, a senha aparecer\u00e1 somente na cria\u00e7\u00e3o deste, ent\u00e3o guarde-a em um local seguro antes de continuar. Atrelar uma pol\u00edtica (restri\u00e7\u00e3o) ao usu\u00e1rio, deve ser feita posteriormente com a fun\u00e7\u00e3o de adicionar pol\u00edticas. Ao deletar um Usu\u00e1rio, o usu\u00e1rio n\u00e3o poder\u00e1 ser recuperado, e todas as configura\u00e7\u00f5es de pol\u00edticas atreladas tamb\u00e9m ser\u00e3o descartadas, mas as pol\u00edticas em si ainda continuar\u00e3o existindo. Gerenciar Pol\u00edticas \u00b6 Ao Listar as Pol\u00edticas, o usu\u00e1rio deve escolher pelo n\u00famero mostrado na tela aquela que quer visualizar mais informa\u00e7\u00f5es. Para importar uma pol\u00edtica, o usu\u00e1rio deve passar o path completo do arquivo .json . Caso seja um arquivo v\u00e1lido, a regra ser\u00e1 criada e permanentemente adicionada ao seu reposit\u00f3rio de pol\u00edticas. Para delet\u00e1-la, deve apagar o arquivo .json criado em iam/policies/ . O nome da pol\u00edtica ser\u00e1 o nome do arquivo, sem a extens\u00e3o. Para facilitar a cria\u00e7\u00e3o, construa a pol\u00edtica pela dashboard da AWS e copie o conte\u00fado do arquivo .json gerado. Come\u00e7ando \u00b6 Para seguir esse tutorial \u00e9 necess\u00e1rio: Tecnologias: Terraform, Python Documentos: Terraform AWS Docs Pr\u00e9-Requisitos: aqueles anteriormente destacados para o funcionamento do programa e uma conta na AWS com permiss\u00f5es de administrador e suas credenciais. Danger ATEN\u00c7\u00c3O: Estas pr\u00f3ximas etapas ser\u00e3o feitas para vias de estudo, n\u00e3o \u00e9 recomendado que sejam feitas em um ambiente de produ\u00e7\u00e3o. Al\u00e9m disso, as chaves que ser\u00e3o utilizadas s\u00e3o extremamente sens\u00edveis, ent\u00e3o n\u00e3o as compartilhe com ningu\u00e9m, muito menos disponibilize-as no GitHub ou similares. Daqui em diante \u00e9 por sua conta e risco. O que \u00e9 Terraform? \u00b6 Terraform \u00e9 uma ferramenta de infraestrutura por c\u00f3digo, desenvolvida pela HashiCorp , que te permite definir, tanto para Cloud P\u00fablica , quanto para Cloud Privada , recursos de infraestrutura em c\u00f3digo poss\u00edvel de ser lido pelo ser humano e pelo computador, podendo ser versionado, reutiliz\u00e1do e compartilhado. Terraform e AWS \u00b6 A HashiCorp disponibiliza uma s\u00e9rie de m\u00f3dulos para os recursos na aws que podem ser copiados e reconfigurados para construir a sua infraestrutura. Para facilitar a sua pesquisa, a documenta\u00e7\u00e3o no link acima \u00e9 de grande utilidade. Existem 4 grandes tipos de m\u00f3dulos que ser\u00e3o explorados neste roteiro, s\u00e3o eles: Provider: \u00e9 o m\u00f3dulo que permite a comunica\u00e7\u00e3o com a AWS, e \u00e9 o primeiro m\u00f3dulo que deve ser importado. Ele \u00e9 respons\u00e1vel por definir a regi\u00e3o que ser\u00e1 utilizada, e tamb\u00e9m as credenciais de acesso. Resource: \u00e9 o m\u00f3dulo que define os recursos que ser\u00e3o utilizados na AWS. Por exemplo, se voc\u00ea deseja criar uma inst\u00e2ncia EC2, voc\u00ea deve importar o m\u00f3dulo aws_instance e configurar os par\u00e2metros necess\u00e1rios para a cria\u00e7\u00e3o da inst\u00e2ncia. Data: \u00e9 o m\u00f3dulo que permite a consulta de informa\u00e7\u00f5es de recursos j\u00e1 existentes na AWS. Por exemplo, se voc\u00ea deseja consultar o ID de uma inst\u00e2ncia EC2, voc\u00ea deve importar o m\u00f3dulo aws_instance e configurar os par\u00e2metros necess\u00e1rios para a consulta da inst\u00e2ncia. Output: \u00e9 o m\u00f3dulo que permite a visualiza\u00e7\u00e3o de informa\u00e7\u00f5es de recursos j\u00e1 existentes na AWS. Por exemplo, se voc\u00ea deseja visualizar o ID de uma inst\u00e2ncia EC2, voc\u00ea deve importar o m\u00f3dulo aws_instance e configurar os par\u00e2metros necess\u00e1rios para a visualiza\u00e7\u00e3o da inst\u00e2ncia. Criando a Infraestrutura B\u00e1sica para o roteiro \u00b6 Em primeiro lugar, defina um diret\u00f3rio(pasta) para o seu projeto. Isso vai ser importante para posteriormente replicar o que foi feito e poder escalar para a constru\u00e7\u00e3o de uma infraestrutura maior com o aux\u00edlio de uma aplica\u00e7\u00e3o em python . D\u00ea o nome de sample para o diret\u00f3rio, pois ele ser\u00e1 a amostra replicada para cada regi\u00e3o. Para este tutorial iremos utilizar somente a regi\u00e3o us-east-1 (Norte da Virg\u00ednia). Dentro deste diret\u00f3rio, crie um arquivo chamado main.tf e outro chamado variables.tf . O primeiro ser\u00e1 respons\u00e1vel por definir os providers necess\u00e1rios e iniciar a estrutura do terraform, e o segundo ser\u00e1 respons\u00e1vel por definir as vari\u00e1veis que ser\u00e3o utilizadas para a cria\u00e7\u00e3o dos recursos. Dentro do arquivo main.tf , insira o seguinte c\u00f3digo: terraform { required_providers { aws = { source = \"hashicorp/aws\" version = \"~> 4.16\" } } required_version = \">= 1.2.0\" } Este Snipet de c\u00f3digo \u00e9 respons\u00e1vel, ent\u00e3o, por definir a vers\u00e3o do terraform que ser\u00e1 utilizada e tamb\u00e9m a vers\u00e3o do provider aws que ser\u00e1 necess\u00e1rio. Al\u00e9m disso, \u00e9 necess\u00e1rio definir, em si, a regi\u00e3o do provider e passar a ele as credenciais para poder acessar a sua AWS. Em um novo arquivo provider.tf , insira o seguinte c\u00f3digo: provider \"aws\" { region = var.region access_key = var.AWS_ACCESS_KEY_ID secret_key = var.AWS_SECRET_ACCESS_KEY } E no arquivo j\u00e1 criado variables.tf , insira o seguinte c\u00f3digo: variable \"region\" { type = string default = \"us-east-1\" } variable \"AWS_ACCESS_KEY_ID\" { type = string sensitive = true } variable \"AWS_SECRET_ACCESS_KEY\" { type = string sensitive = true } Info O arquivo variables.tf \u00e9 respons\u00e1vel por definir as vari\u00e1veis que ser\u00e3o utilizadas na infraestrutura do Terraform. O par\u00e2metro sensitive = true \u00e9 respons\u00e1vel por ocultar a vari\u00e1vel quando for executado o comando terraform plan ou terraform apply . Agora, execute o comando terraform init para que o terraform baixe os providers necess\u00e1rios para a cria\u00e7\u00e3o da infraestrutura. terraform init Definindo as vari\u00e1veis para o c\u00f3digo: \u00b6 Anteriormente foi falado da import\u00e2ncia de manter o sigilo quanto \u00e0s chaves de acesso \u00e0 AWS , e, portanto, iremos precisar de um arquivo que as contenha, e ao mesmo tempo, n\u00e3o seja enviado para nenhum reposit\u00f3rio aberto. O Terraform consegue ler um arquivo e dele extrair as vari\u00e1veis que ser\u00e3o utilizadas na infraestrutura. Para isso, crie um arquivo chamado config.tfvars.json dentro de uma pasta config . \u00c9 importante que estes estejam descritos no seu arquivo .gitignore ou similares. Adicione o conte\u00fado a esse arquivo: { \"region\" : \"us-east-1\" , \"AWS_ACCESS_KEY_ID\" : [ \"SEU_ID_CHAVE\" ], \"AWS_SECRET_ACCESS_KEY\" : [ \"SUA_SECRET_KEY\" ], } O arquivo variables.tf ser\u00e1 respons\u00e1vel por informar ao terraform quais as vari\u00e1veis que ser\u00e3o necess\u00e1rias e quais os seus tipos. O arquivo config.tfvars.json ser\u00e1 respons\u00e1vel por informar ao terraform quais os valores que ser\u00e3o utilizados para as vari\u00e1veis. Agora, podemos aplicar a nossa infraestrutura. Para isso, execute o comando terraform apply e informe o arquivo config.tfvars.json como vari\u00e1vel de entrada. terraform apply -var-file=config/config.tfvars.json Criando a Infraestrutura de Rede \u00b6 Agora que j\u00e1 temos a infraestrutura b\u00e1sica criada, podemos come\u00e7ar a criar a infraestrutura de rede. Para isso, iremos criar um arquivo chamado network.tf e nele iremos definir os recursos que ser\u00e3o utilizados para a cria\u00e7\u00e3o da infraestrutura de rede. Para a cria\u00e7\u00e3o de rede, vamos come\u00e7ar a exercitar a pesquisa na documenta\u00e7\u00e3o do terraform. Crie um recurso para cada uma das seguintes funcionalidades e adicione os par\u00e2metros tamb\u00e9m descritos: VPC: cidr_block, instance_tenancy, enable_dns_support, enable_dns_hostnames e tags={Name} Subnet: vpc_id, cidr_block, map_public_ip_on_launch e tags={Name} Internet Gateway: vpc_id e tags={Name} Route Table: vpc_id e tags={Name} Route: route_table_id, destination_cidr_block e gateway_id Route Table Association: subnet_id e route_table_id Para as configura\u00e7\u00f5es de rede, adicione ao arquivo variables.tf as seguintes vari\u00e1veis: variable \"network_configurations\" { type = object ({ vpcCIDRblock = string instanceTenancy = string dnsSupport = bool dnsHostNames = bool publicsCIDRblock = string mapPublicIP = bool publicdestCIDRblock = string }) } E como exemplo, adicione ao arquivo config.tfvars.json as seguintes configura\u00e7\u00f5es: \"network_configurations\" : { \"vpcCIDRblock\" : \"172.16.0.0/16\" , \"instanceTenancy\" : \"default\" , \"dnsSupport\" : true , \"dnsHostNames\" : true , \"publicsCIDRblock\" : \"172.16.10.0/24\" , \"mapPublicIP\" : true , \"publicdestCIDRblock\" : \"0.0.0.0/0\" } O restante das vari\u00e1veis, associe diretamente no arquivo network.tf , utilizando a seguinte estrutura: variavel = [ recurso ].[ nome_do_recurso ].[ vari\u00e1vel_desejada ] # Exemplo: vpc_id = aws_vpc.VPC.id Criando Inst\u00e2ncias EC2 \u00b6 A cria\u00e7\u00e3o de inst\u00e2ncias vai nos trazer alguns conceitos extremamente interessantes para a escalabilidade da nossa aplica\u00e7\u00e3o no terraform, s\u00e3o estes: count , for_each , e locals . Vamos come\u00e7ar pelo b\u00e1sico. Crie uma inst\u00e2ncia usando o recurso aws_instance no arquivo instances.tf . Realize o Apply da infraestrutura e veja sua inst\u00e2ncia sendo criada. Utilizando a m\u00f3dulo de output do terraform, crie um output para a inst\u00e2ncia criada. O output deve conter o id da inst\u00e2ncia e o DNS p\u00fablico e estar\u00e1 localizado no arquivo gerado autom\u00e1ticamente terraform.tfstate . Escalando com o count \u00b6 Com o argumento count dentro da defini\u00e7\u00e3o do recurso, crie 3 inst\u00e2ncias EC2. Execute o terraform apply e veja as 3 inst\u00e2ncias sendo criadas. O count \u00e9 um sistema de cria\u00e7\u00e3o em massa de inst\u00e2ncias com as mesmas configura\u00e7\u00f5es, e deve ser usado para rapidamente construir um grupo de m\u00e1quinas com as mesmas configura\u00e7\u00f5es para provavelmente a mesma aplica\u00e7\u00e3o. Para possuir maior controle sobre o m\u00faltiplo deploy de inst\u00e2ncias, \u00e9 mais recomendado usar o for_each . Escalando com o for_each \u00b6 Em primeiro lugar, o for_each ir\u00e1 utilizar da configura\u00e7\u00e3o de vari\u00e1veis no formato de list ou map para criar m\u00faltiplas inst\u00e2ncias com configura\u00e7\u00f5es diferentes. Para isso, vamos criar uma vari\u00e1vel no arquivo variables.tf : variable \"instances_configuration\" { type = list ( object ({ instance_name = string instance_type = string ami = string key_name = string })) } O tipo list indica ao terraform que a vari\u00e1vel \u00e9 uma lista e deve ser percorrida pelo for_each . J\u00e1 o tipo object indica que a vari\u00e1vel \u00e9 um objeto, ou seja, um conjunto de vari\u00e1veis definidas, que podem ser acessadas pela sua chave. No arquivo de vari\u00e0veis .json , deve ser construido os valores da forma descrita acima. O recurso da inst\u00e2ncia com a constru\u00e7\u00e3o do for_each deve ser similar a: resource \"aws_instance\" \"web\" { for_each = { for instance in var.instances_configuration : instance.instance_name = > instance } ami = each.value.ami instance_type = each.value.instance_type subnet_id = aws_subnet.Subnet.id key_name = each.value.key_name tags = { Name = \"${each.value.instance_name}\" } } OBS.: Note que para indicar o valor de cada inst\u00e2ncia \u00e9 usado o complemento each.value Crie 3 inst\u00e2ncias diferentes com este m\u00e9todo. Escalando com o for_each e count \u00b6 \u00c9 de certo que n\u00e3o \u00e9 poss\u00edvel usar ambas as configura\u00e7\u00f5es for_each e count no mesmo recurso, mas podemos contornar essa situa\u00e7\u00e3o. Para isso, adicione uma vari\u00e0vel ao conjunto de vari\u00e1veis de configura\u00e7\u00e3o das inst\u00e2ncias que indicar\u00e1 a quantidade delas a serem criadas. Em seguida vamos utilizar as vari\u00e1veis locais , com o argumento locals . Construindo baseado na ideia de replicar a configura\u00e7\u00e3o definida para a quantidade de inst\u00e2ncias, basta criar um for que atenda a essa quantidade e adicione v\u00e1rias vezes a mesma configura\u00e7\u00e3o mudando apenas o nome, com o acr\u00e9scimo de um n\u00famero que indique ind\u00edce, por exemplo. Al\u00e9m disso, para aplicar tais configura\u00e7\u00f5es locais, as informa\u00e7\u00f5es devem ser passadas pela fun\u00e7\u00e3o de flatten . No final, a sua inst\u00e2ncia deve possuir o seguinte formato: locals { serverconfig = [ for srv in var.instances_configuration : [ for i in range ( 1 , srv.no_of_instances + 1 ) : { instance_name = \"${srv.instance_name}-${i}\" instance_type = srv.instance_type ami = srv.ami security_groups_ids = srv.security_groups_ids key_name = srv.key_name } ] ] } locals { instances = flatten ( local.serverconfig ) } resource \"aws_instance\" \"web\" { for_each = { for server in local.instances : server.instance_name = > server } ami = each.value.ami instance_type = each.value.instance_type subnet_id = aws_subnet.Subnet.id vpc_security_group_ids = each.value.security_groups_ids key_name = each.value.key_name tags = { Name = \"${each.value.instance_name}\" } } output \"instances\" { value = [ for instance in aws_instance.web : instance ] description = \"All Machine details\" } Criando Security Groups \u00b6 Para a cria\u00e7\u00e3o dos security groups, vamos utilizar o m\u00e9todo do for_each pensando na escalabilidade da solu\u00e7\u00e3o. Al\u00e9m disso, na AWS \u00e9 poss\u00edvel adicionar v\u00e1rias regras tanto de Ingress (Inbound) quanto de Egress (Outbound) ao mesmo tempo, portanto, nossa aplica\u00e7\u00e3o tamb\u00e9m deve conseguir faz\u00ea-lo. Crie o arquivo security_groups.tf e construa as suas configura\u00e7\u00f5es. Dica Para criar m\u00faltiplas regras de Ingress e Egress , utilize vari\u00e1veis do tipo dynamic . Teste criando 2 grupos de seguran\u00e7a, um com uma regra de Ingress e duas regras de Egress e outro com duas regras de Ingress e uma regra de Egress . Aplicando o security group nas inst\u00e2ncias \u00b6 Utilizando a fun\u00e7\u00e3o de output , \u00e9 poss\u00edvel coletar o ID do Security Group definido autom\u00e1ticamente pela AWS. Para atrel\u00e1-lo a uma inst\u00e2ncia use a vari\u00e1vel do recurso aws_instance chamada vpc_security_group_ids e passe uma lista de IDs de Security Groups como valor. Crie um Security Group que libere a conex\u00e3o SSH e associe-o a uma inst\u00e2ncia Junto com o par de chaves criado e associado a key_name , teste o acesso \u00e0 inst\u00e2ncia. Criando Infraestrutura para o IAM \u00b6 Para a cria\u00e7\u00e3o da estrutura no IAM, ser\u00e3o necess\u00e1rios 2 recursos principais: o usu\u00e1rio em si e as policies (pol\u00edticas ou restri\u00e7\u00f5es) de acesso. Al\u00e9m disso, s\u00e3o necess\u00e1rios recursos que criem o usu\u00e1rio e atrelem a ele uma senha autom\u00e1tica (que pode ser exportada como output ), um recurso que crie o documento da pol\u00edtica, para facilitar a implementa\u00e7\u00e3o, e recursos que criem a conex\u00e3o entre o usu\u00e1rio e a pol\u00edtica. Crie o arquivo policies.tf e construa as suas configura\u00e7\u00f5es. Dica Para atrelar um documento a uma pol\u00edtica, use a seguinte vari\u00e1vel e sua configura\u00e7\u00e3o: policy = data.aws_iam_policy_document.ec2_policy[each.value.name].json Crie o arquivo users.tf e construa as suas configura\u00e7\u00f5es. Associe uma pol\u00edtica criada a um usu\u00e1rio atrav\u00e9s do recurso aws_iam_user_policy_attachment . Dica Crie uma vari\u00e0vel para cada uma das configura\u00e7\u00f5es acima, ou seja, uma vari\u00e1vel para a configura\u00e7\u00e3o de pol\u00edticas, outra para a configura\u00e7\u00e3o de usu\u00e1rios e outra para a configura\u00e7\u00e3o de atrelamento de pol\u00edticas a usu\u00e1rios. Teste a cria\u00e7\u00e3o de um usu\u00e1rio com a restri\u00e7\u00e3o de acesso \u00e0 regi\u00e3o da North Virginia. A pol\u00edtica criada para isso est\u00e1 abaixo: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : \"*\" , \"Resource\" : \"*\" , \"Condition\" : { \"StringEquals\" : { \"aws:RequestedRegion\" : \"us-east-1\" } } } ] } Criando m\u00faltiplas Regi\u00f5es \u00b6 Como os usu\u00e1rios s\u00e3o globais, n\u00e3o vamos nos preocupar com suas configura\u00e7\u00f5es para cada inst\u00e2ncia, eles podem receber sua pasta separada para gerenciamento de infraestrutura. Pensando, ent\u00e3o, nos outros arquivos, ou seja, main.tf , provider.tf , network.tf , instances.tf , security_groups.tf , para criar uma nova regi\u00e3o, basta replicar todo o diret\u00f3rio, mudando apenas no arquivo de configura\u00e7\u00f5es .json a regi\u00e3o do provider . Crie duas pastas com essa infraestrutura, uma para a regi\u00e3o da North Virginia e outra para a regi\u00e3o de Ohio. Teste a cria\u00e7\u00e3o de uma inst\u00e2ncia em cada regi\u00e3o. OBS.: Aplique o comando de init e apply em cada uma das pastas criadas. Criando um HA de servidores web \u00b6 Configurando uma Imagem Base \u00b6 Para a cria\u00e7\u00e3o de um HA de servidores web, \u00e9 necess\u00e1rio primeiro criar uma imagem( ami ) que funcionar\u00e1 como template para a cria\u00e7\u00e3o de inst\u00e2ncias caso as m\u00e1quinas base estejam ficando sobre-lotadas. Crie uma inst\u00e2ncia com o sistema operacional Ubuntu Server 18.04 LTS. Aplique: sudo apt update; sudo apt install nodejs build-essential -y Edite um arquivo server.js: #!/usr/bin/env nodejs var http = require ( 'http' ); var os = require ( 'os' ); var crypto = require ( 'crypto' ); http . createServer ( function ( req , res ) { res . writeHead ( 200 , { 'Content-Type' : 'text/plain' }); var nonce = 1 ; var seed = Math . random (); var h = crypto . createHash ( 'sha256' ); h . update ( new Buffer ( nonce + \" Hello World \" + seed )); while ( h . digest ( \"hex\" ). substr ( 0 , 3 ) != '000' ) { h = crypto . createHash ( 'sha256' ); nonce ++ ; h . update ( new Buffer ( nonce + \" Hello World \" + seed )); } res . end ( '{ \"host\": ' + os . hostname () + ', \"nonce\": ' + nonce + '}' ); }). listen ( 8080 , '' ); console . log ( 'Server running at http://localhost:8080/' ); Torne o arquivo execut\u00e1vel: chmod +x ./server.js Execute e teste o servidor(lembre-se de liberar a porta no security group): Configure a m\u00e1quina para iniciar o servidor automaticamente ap\u00f3s reboot : crontab -e\\ @reboot /home/ubuntu/server.js D\u00ea reboot e teste o acesso ao servidor novamente. Copywright O procedimento foi retirado do site oficial da mat\u00e9ria . Com o template de inst\u00e2ncia criado, gere uma imagem dele pela dashboard da AWS e salve a ami gerada para uso no pr\u00f3ximos passos. Criando os recursos para o HA \u00b6 Para construir o HA, vamos utilizar o recurso aws_autoscaling_group , emparelhado com aws_launch_configuration e tamb\u00e9m aws_lb ( Load Balence ). Para isso, construa a infraestrutura baseada neste tutorial: Tutorial de HA . Ele foi produzido pela Hashicorp, empresa que desenvolve o Terraform, mas em caso de d\u00favida, o resultado esperado se encontra dentro da pasta sample-HA no reposit\u00f3rio do meu programa. Dicas Crie Security Groups diferentes para o Load Balencer e para configura\u00e7\u00e3o das inst\u00e2ncias. S\u00e3o necess\u00e1rias 3 Subnets para a cria\u00e7\u00e3o do Load Balencer . Crie seu Pr\u00f3prio Programa. \u00b6 Com toda a experi\u00eancia adquirida na formata\u00e7\u00e3o, constru\u00e7\u00e3o e manipula\u00e7\u00e3o da infraestrutura por meio do terraform, agora voc\u00ea \u00e9 capaz de criar o seu pr\u00f3rpio programa. Eu criei, utilizando Python , uma ferramenta que roda no terminal e executa as opera\u00e7\u00f5es descritas acima, de forma automatizada. Para isso, a aplica\u00e7\u00e3o copia os arquivos de base, armazenados na pasta sample para uma nova pasta com o nome da regi\u00e3o, configura o arquivo .tvars.json com as informa\u00e7\u00f5es descritas pelo usu\u00e1rio e executa o terraform para a cria\u00e7\u00e3o da infraestrutura. O seu programa pode ser criado via Python ou qualquer outra linguagem que voc\u00ea se sinta confort\u00e1vel para manipula\u00e7\u00e3o de arquivos e execu\u00e7\u00e3o de comandos. \u00c9 poss\u00edvel, tamb\u00e9m, que essas configura\u00e7\u00f5es sejam feitas via backend e toda a interface de usu\u00e1rio seja feita via frontend em outra linguagem, uma vez que toda a configura\u00e7\u00e3o da infraestrutura pode ser enviada via .json para o backend. Aqui o c\u00e9u \u00e9 o limite! Use a sua criatividade! Motiva\u00e7\u00e3o \u00b6 Minha motiva\u00e7\u00e3o para a cria\u00e7\u00e3o desta aplica\u00e7\u00e3o e, consequentemente, este tutorial veio da crescente vontade de aprender sobre infraestrutura e Computa\u00e7\u00e3o Nuvem, o que me motivou a tentar produzir algo robusto e confi\u00e1vel, que pudesse ser utilizado por pessoas com algum conhecimento em infraestrutura, assim como eu, mas com a vontade de aprender.","title":"Home"},{"location":"#infraestrutura-por-codigo-aplicacao-em-python-para-gerenciar-infraestrutura-construida-com-terraform","text":"Aluno: Francisco Pinheiro Janela Curso: Engenharia da Computa\u00e7\u00e3o Semestre: 6 Contato: franciscopj@al.insper.edu.br Ano: 2022","title":"Infraestrutura por C\u00f3digo - Aplica\u00e7\u00e3o em Python para gerenciar infraestrutura constru\u00edda com Terraform"},{"location":"#como-operar-com-o-meu-programa","text":"Warning O programa foi desenvolvido por uma \u00fanica pessoa, e existem algumas falhas na robustez da utiliza\u00e7\u00e3o, ou seja, \u00e9 da responsabilidade do usu\u00e1rio configurar adequadamente os campos durante a utiliza\u00e7\u00e3o para que a montagem n\u00e3o falhe. Ademais, aproveito para lembrar a import\u00e2ncia da prote\u00e7\u00e3o de suas chaves de acesso , utilize-as apenas em vari\u00e1veis de ambiente. Esta aplica\u00e7\u00e3o utiliza a cria\u00e7\u00e3o de um arquivo .env para armazen\u00e1-las. Mais sobre isso na aba de Pr\u00e9-Requisitos.","title":"Como Operar com o meu programa:"},{"location":"#pre-requisitos","text":"Para come\u00e7ar a operar com o meu programa, sigam o passo a passo indicado no readme do meu reposit\u00f3rio no github.","title":"Pr\u00e9-requisitos"},{"location":"#como-usar","text":"Ao iniciar o programa pela primeira vez, o usu\u00e1rio se depara com a escolha entre a configura\u00e7\u00e3o das regi\u00f5es, podendo, nesse caminho, gerenciar inst\u00e2ncias, gerenciar security groups e levantar aplica\u00e7\u00f5es em HA (High Availability), e a configura\u00e7\u00e3o do ambiente do IAM, onde o usu\u00e1rio pode gerenciar usu\u00e1rios e pol\u00edticas(restri\u00e7\u00f5es). Para facilitar, a \u00e1rvore de navega\u00e7\u00e3o abaixo, pode trazer mais facilidade para o usu\u00e1rio se encontrar pelo programa: \u251c\u2500\u2500 Configura\u00e7\u00e3o de Regi\u00f5es \u2502 \u251c\u2500\u2500 Criar, deletar ou escolher uma regi\u00e3o \u2502 \u251c\u2500\u2500 Gerenciar Inst\u00e2ncias \u2502 \u2502 \u251c\u2500\u2500 Listar Inst\u00e2ncias \u2502 \u2502 \u251c\u2500\u2500 Criar Inst\u00e2ncia \u2502 \u2502 \u251c\u2500\u2500 Deletar Inst\u00e2ncia \u2502 \u2502 \u251c\u2500\u2500 Atualizar Configura\u00e7\u00e3o de uma Inst\u00e2ncia \u2502 \u2502 \u2514\u2500\u2500 Voltar \u2502 \u251c\u2500\u2500 Gerenciar Security Groups \u2502 \u2502 \u251c\u2500\u2500 Listar Security Groups \u2502 \u2502 \u251c\u2500\u2500 Criar Security Group \u2502 \u2502 \u251c\u2500\u2500 Deletar Security Group \u2502 \u2502 \u251c\u2500\u2500 Adicionar Regras a um Security Group \u2502 \u2502 \u251c\u2500\u2500 Deletar Regras de um Security Group \u2502 \u2502 \u2514\u2500\u2500 Voltar \u2502 \u2514\u2500\u2500 Gerenciar Aplica\u00e7\u00e3o em HA \u2502 \u251c\u2500\u2500 Listar Aplica\u00e7\u00e3o em HA \u2502 \u251c\u2500\u2500 Criar Aplica\u00e7\u00e3o em HA \u2502 \u251c\u2500\u2500 Deletar Aplica\u00e7\u00e3o em HA \u2502 \u2514\u2500\u2500 Voltar \u251c\u2500\u2500 Configura\u00e7\u00e3o do IAM \u2502 \u251c\u2500\u2500 Limpar ou Restaurar a Infraestrutura do IAM \u2502 \u251c\u2500\u2500 Gerenciar Usu\u00e1rios \u2502 \u2502 \u251c\u2500\u2500 Listar Usu\u00e1rios \u2502 \u2502 \u251c\u2500\u2500 Criar Usu\u00e1rio \u2502 \u2502 \u251c\u2500\u2500 Deletar Usu\u00e1rio \u2502 \u2502 \u251c\u2500\u2500 Adicionar Pol\u00edticas a um Usu\u00e1rio \u2502 \u2502 \u251c\u2500\u2500 Deletar Pol\u00edticas de um Usu\u00e1rio \u2502 \u2502 \u2514\u2500\u2500 Voltar \u2502 \u2514\u2500\u2500 Gerenciar Pol\u00edticas \u2502 \u251c\u2500\u2500 Listar Pol\u00edticas \u2502 \u251c\u2500\u2500 Importar Pol\u00edtica \u2502 \u2514\u2500\u2500 Voltar \u251c\u2500\u2500 Listar todas as Inst\u00e2ncias \u2514\u2500\u2500 Sair Em sua maioria, as instru\u00e7\u00f5es de uso de cada uma das funcionalidades est\u00e1 autocontida no pr\u00f3prio programa, mas existem algumas considera\u00e7\u00f5es que podem ser feitas:","title":"Como usar"},{"location":"#configuracao-de-regioes","text":"","title":"Configura\u00e7\u00e3o de Regi\u00f5es"},{"location":"#criar-deletar-ou-escolher-uma-regiao","text":"Ao criar uma regi\u00e3o em um uma daquelas dispon\u00edveis no programa, garanta que a sua conta possua permiss\u00f5es para faz\u00ea-lo, pois isso pode gerar um problema para o bom funcionamento da aplica\u00e7\u00e3o. Ao criar uma nova regi\u00e3o, autom\u00e1ticamente a infraestrutura b\u00e1sica \u00e9 copiada da pasta de sample para uma com o nome da regi\u00e3o, com a adi\u00e7\u00e3o do prefixo tf- . Ao escolher a op\u00e7\u00e3o de deletar uma regi\u00e3o, n\u00e3o existe confirma\u00e7\u00e3o necess\u00e1ria, e se o comando for executado, a regi\u00e3o ser\u00e1 deletada, ou seja, ir\u00e1 perder todos os recursos criados naquela regi\u00e3o de uma vez. Portanto, \u00e9 importante que o usu\u00e1rio tenha certeza de que deseja deletar a regi\u00e3o.","title":"Criar, deletar ou escolher uma regi\u00e3o"},{"location":"#gerenciar-instancias","text":"Ao Listar as Inst\u00e2ncias, o usu\u00e1rio deve escolher pelo n\u00famero mostrado na tela aquela que quer visualizar mais informa\u00e7\u00f5es. Ao Criar uma Inst\u00e2ncia, o usu\u00e1rio deve escolher o tipo de inst\u00e2ncia que deseja criar, e o nome da inst\u00e2ncia que deseja criar. O nome da inst\u00e2ncia deve ser \u00fanico, ou seja, n\u00e3o pode haver duas inst\u00e2ncias com o mesmo nome na mesma regi\u00e3o. Al\u00e9m disso, o n\u00famero de inst\u00e2ncias olocado \u00e9 a quantidade de r\u00e9plicas aquelas configura\u00e7\u00f5es que ir\u00e3o ser criadas. Por fim, o Sistema Operacional pr\u00e9 definido \u00e9 o Ubuntu Server 18.04 LTS . Warning O usu\u00e1rio deve ter criado previamente seu par de chaves na AWS para poder indic\u00e1-lo na cria\u00e7\u00e3o de uma inst\u00e2ncia e, por sua vez, poder acess\u00e1-lo via ssh posteriormente. Ao atualizar a configura\u00e7\u00e3o de uma inst\u00e2ncia estar\u00e1 mudando todas as r\u00e9plicas criadas. Quando for feita a mudan\u00e7a de n\u00famero de inst\u00e2ncias, ser\u00e1 sempre a com \u00edndice maior que ser\u00e1 deletada. Ao mudar os ids dos security groups, dever\u00e1 passar novamente todos aqueles que desejar aplicar \u00e0 inst\u00e2ncia, configura\u00e7\u00f5es antigas ser\u00e3o perdidas.","title":"Gerenciar Inst\u00e2ncias"},{"location":"#gerenciar-security-groups","text":"Ao Listar os Security Groups, o usu\u00e1rio deve escolher pelo n\u00famero mostrado na tela aquele que quer visualizar mais informa\u00e7\u00f5es. Ao Criar um Security Group, o usu\u00e1rio deve escolher o nome do Security Group que deseja criar. O nome do Security Group deve ser \u00fanico, ou seja, n\u00e3o pode haver dois Security Groups com o mesmo nome na mesma regi\u00e3o. Al\u00e9m disso, poder\u00e1 ser criado quantas regras de Ingress e Egress que o usu\u00e1rio desejar, se atentando somente \u00e0 libera\u00e7\u00e3o de todas as portas para n\u00e3o correr riscos de seguran\u00e7a. S\u00f3 ser\u00e1 poss\u00edvel deletar um Security Group se ele n\u00e3o estiver sendo usado, ou seja, se quiser delet\u00e1-lo, deve remover todas as depend\u00eancias dele nas inst\u00e2ncias da regi\u00e3o.","title":"Gerenciar Security Groups"},{"location":"#gerenciar-aplicacao-em-ha","text":"Em primeiro lugar, a Aplica\u00e7\u00e3o em HA \u00e9 uma demo com funcionamento limitado, que permite a cria\u00e7\u00e3o de uma aplica\u00e7\u00e3o predefinida e utiliza sistemas de Auto Scalling e Load Balancing dispon\u00edveis na AWS. S\u00f3 \u00e9 poss\u00edvel criar em duas regi\u00f5es: us-east-1 e us-east-2 . S\u00f3 pode ser criada uma aplica\u00e7\u00e3o em HA por regi\u00e3o, ou seja, se j\u00e1 houver uma aplica\u00e7\u00e3o em HA criada na regi\u00e3o, n\u00e3o ser\u00e1 poss\u00edvel criar outra. Para pegar a URL da aplica\u00e7\u00e3o e poder acess\u00e1-la, basta listar a aplica\u00e7\u00e3o no programa.","title":"Gerenciar Aplica\u00e7\u00e3o em HA"},{"location":"#configuracao-do-iam","text":"","title":"Configura\u00e7\u00e3o do IAM"},{"location":"#limpar-ou-restaurar-a-infraestrutura-do-iam","text":"Limpar a infraestrutura do IAM significa apagar todas as configura\u00e7\u00f5es pr\u00e9 criadas para usu\u00e1rios, mas todos as pol\u00edticas importadas continuar\u00e3o sendo criadas quando for restaurada a infraestrutura. A Infraestrutura vem configurada com 4 pol\u00edticas de teste: AdministratorAccess , AdminNorthVirginia , AdminOregon e AdminOhio . Essas pol\u00edticas s\u00e3o criadas automaticamente quando a infraestrutura \u00e9 restaurada, e n\u00e3o podem ser deletadas.","title":"Limpar ou Restaurar a Infraestrutura do IAM"},{"location":"#gerenciar-usuarios","text":"Ao Listar os Usu\u00e1rios, desta vez o usu\u00e1rio n\u00e3o precisa escolher pelo n\u00famero mostrado na tela, pois o programa j\u00e1 ir\u00e1 mostrar as informa\u00e7\u00f5es de todos os usu\u00e1rios e todas as pol\u00edticas atreladas a eles. Ao Criar um Usu\u00e1rio, o usu\u00e1rio deve escolher o nome do Usu\u00e1rio que deseja criar. O nome do Usu\u00e1rio deve ser \u00fanico, ou seja, n\u00e3o pode haver dois Usu\u00e1rios com o mesmo nome na mesma regi\u00e3o. Al\u00e9m disso, a senha aparecer\u00e1 somente na cria\u00e7\u00e3o deste, ent\u00e3o guarde-a em um local seguro antes de continuar. Atrelar uma pol\u00edtica (restri\u00e7\u00e3o) ao usu\u00e1rio, deve ser feita posteriormente com a fun\u00e7\u00e3o de adicionar pol\u00edticas. Ao deletar um Usu\u00e1rio, o usu\u00e1rio n\u00e3o poder\u00e1 ser recuperado, e todas as configura\u00e7\u00f5es de pol\u00edticas atreladas tamb\u00e9m ser\u00e3o descartadas, mas as pol\u00edticas em si ainda continuar\u00e3o existindo.","title":"Gerenciar Usu\u00e1rios"},{"location":"#gerenciar-politicas","text":"Ao Listar as Pol\u00edticas, o usu\u00e1rio deve escolher pelo n\u00famero mostrado na tela aquela que quer visualizar mais informa\u00e7\u00f5es. Para importar uma pol\u00edtica, o usu\u00e1rio deve passar o path completo do arquivo .json . Caso seja um arquivo v\u00e1lido, a regra ser\u00e1 criada e permanentemente adicionada ao seu reposit\u00f3rio de pol\u00edticas. Para delet\u00e1-la, deve apagar o arquivo .json criado em iam/policies/ . O nome da pol\u00edtica ser\u00e1 o nome do arquivo, sem a extens\u00e3o. Para facilitar a cria\u00e7\u00e3o, construa a pol\u00edtica pela dashboard da AWS e copie o conte\u00fado do arquivo .json gerado.","title":"Gerenciar Pol\u00edticas"},{"location":"#comecando","text":"Para seguir esse tutorial \u00e9 necess\u00e1rio: Tecnologias: Terraform, Python Documentos: Terraform AWS Docs Pr\u00e9-Requisitos: aqueles anteriormente destacados para o funcionamento do programa e uma conta na AWS com permiss\u00f5es de administrador e suas credenciais. Danger ATEN\u00c7\u00c3O: Estas pr\u00f3ximas etapas ser\u00e3o feitas para vias de estudo, n\u00e3o \u00e9 recomendado que sejam feitas em um ambiente de produ\u00e7\u00e3o. Al\u00e9m disso, as chaves que ser\u00e3o utilizadas s\u00e3o extremamente sens\u00edveis, ent\u00e3o n\u00e3o as compartilhe com ningu\u00e9m, muito menos disponibilize-as no GitHub ou similares. Daqui em diante \u00e9 por sua conta e risco.","title":"Come\u00e7ando"},{"location":"#o-que-e-terraform","text":"Terraform \u00e9 uma ferramenta de infraestrutura por c\u00f3digo, desenvolvida pela HashiCorp , que te permite definir, tanto para Cloud P\u00fablica , quanto para Cloud Privada , recursos de infraestrutura em c\u00f3digo poss\u00edvel de ser lido pelo ser humano e pelo computador, podendo ser versionado, reutiliz\u00e1do e compartilhado.","title":"O que \u00e9 Terraform?"},{"location":"#terraform-e-aws","text":"A HashiCorp disponibiliza uma s\u00e9rie de m\u00f3dulos para os recursos na aws que podem ser copiados e reconfigurados para construir a sua infraestrutura. Para facilitar a sua pesquisa, a documenta\u00e7\u00e3o no link acima \u00e9 de grande utilidade. Existem 4 grandes tipos de m\u00f3dulos que ser\u00e3o explorados neste roteiro, s\u00e3o eles: Provider: \u00e9 o m\u00f3dulo que permite a comunica\u00e7\u00e3o com a AWS, e \u00e9 o primeiro m\u00f3dulo que deve ser importado. Ele \u00e9 respons\u00e1vel por definir a regi\u00e3o que ser\u00e1 utilizada, e tamb\u00e9m as credenciais de acesso. Resource: \u00e9 o m\u00f3dulo que define os recursos que ser\u00e3o utilizados na AWS. Por exemplo, se voc\u00ea deseja criar uma inst\u00e2ncia EC2, voc\u00ea deve importar o m\u00f3dulo aws_instance e configurar os par\u00e2metros necess\u00e1rios para a cria\u00e7\u00e3o da inst\u00e2ncia. Data: \u00e9 o m\u00f3dulo que permite a consulta de informa\u00e7\u00f5es de recursos j\u00e1 existentes na AWS. Por exemplo, se voc\u00ea deseja consultar o ID de uma inst\u00e2ncia EC2, voc\u00ea deve importar o m\u00f3dulo aws_instance e configurar os par\u00e2metros necess\u00e1rios para a consulta da inst\u00e2ncia. Output: \u00e9 o m\u00f3dulo que permite a visualiza\u00e7\u00e3o de informa\u00e7\u00f5es de recursos j\u00e1 existentes na AWS. Por exemplo, se voc\u00ea deseja visualizar o ID de uma inst\u00e2ncia EC2, voc\u00ea deve importar o m\u00f3dulo aws_instance e configurar os par\u00e2metros necess\u00e1rios para a visualiza\u00e7\u00e3o da inst\u00e2ncia.","title":"Terraform e AWS"},{"location":"#criando-a-infraestrutura-basica-para-o-roteiro","text":"Em primeiro lugar, defina um diret\u00f3rio(pasta) para o seu projeto. Isso vai ser importante para posteriormente replicar o que foi feito e poder escalar para a constru\u00e7\u00e3o de uma infraestrutura maior com o aux\u00edlio de uma aplica\u00e7\u00e3o em python . D\u00ea o nome de sample para o diret\u00f3rio, pois ele ser\u00e1 a amostra replicada para cada regi\u00e3o. Para este tutorial iremos utilizar somente a regi\u00e3o us-east-1 (Norte da Virg\u00ednia). Dentro deste diret\u00f3rio, crie um arquivo chamado main.tf e outro chamado variables.tf . O primeiro ser\u00e1 respons\u00e1vel por definir os providers necess\u00e1rios e iniciar a estrutura do terraform, e o segundo ser\u00e1 respons\u00e1vel por definir as vari\u00e1veis que ser\u00e3o utilizadas para a cria\u00e7\u00e3o dos recursos. Dentro do arquivo main.tf , insira o seguinte c\u00f3digo: terraform { required_providers { aws = { source = \"hashicorp/aws\" version = \"~> 4.16\" } } required_version = \">= 1.2.0\" } Este Snipet de c\u00f3digo \u00e9 respons\u00e1vel, ent\u00e3o, por definir a vers\u00e3o do terraform que ser\u00e1 utilizada e tamb\u00e9m a vers\u00e3o do provider aws que ser\u00e1 necess\u00e1rio. Al\u00e9m disso, \u00e9 necess\u00e1rio definir, em si, a regi\u00e3o do provider e passar a ele as credenciais para poder acessar a sua AWS. Em um novo arquivo provider.tf , insira o seguinte c\u00f3digo: provider \"aws\" { region = var.region access_key = var.AWS_ACCESS_KEY_ID secret_key = var.AWS_SECRET_ACCESS_KEY } E no arquivo j\u00e1 criado variables.tf , insira o seguinte c\u00f3digo: variable \"region\" { type = string default = \"us-east-1\" } variable \"AWS_ACCESS_KEY_ID\" { type = string sensitive = true } variable \"AWS_SECRET_ACCESS_KEY\" { type = string sensitive = true } Info O arquivo variables.tf \u00e9 respons\u00e1vel por definir as vari\u00e1veis que ser\u00e3o utilizadas na infraestrutura do Terraform. O par\u00e2metro sensitive = true \u00e9 respons\u00e1vel por ocultar a vari\u00e1vel quando for executado o comando terraform plan ou terraform apply . Agora, execute o comando terraform init para que o terraform baixe os providers necess\u00e1rios para a cria\u00e7\u00e3o da infraestrutura. terraform init","title":"Criando a Infraestrutura B\u00e1sica para o roteiro"},{"location":"#definindo-as-variaveis-para-o-codigo","text":"Anteriormente foi falado da import\u00e2ncia de manter o sigilo quanto \u00e0s chaves de acesso \u00e0 AWS , e, portanto, iremos precisar de um arquivo que as contenha, e ao mesmo tempo, n\u00e3o seja enviado para nenhum reposit\u00f3rio aberto. O Terraform consegue ler um arquivo e dele extrair as vari\u00e1veis que ser\u00e3o utilizadas na infraestrutura. Para isso, crie um arquivo chamado config.tfvars.json dentro de uma pasta config . \u00c9 importante que estes estejam descritos no seu arquivo .gitignore ou similares. Adicione o conte\u00fado a esse arquivo: { \"region\" : \"us-east-1\" , \"AWS_ACCESS_KEY_ID\" : [ \"SEU_ID_CHAVE\" ], \"AWS_SECRET_ACCESS_KEY\" : [ \"SUA_SECRET_KEY\" ], } O arquivo variables.tf ser\u00e1 respons\u00e1vel por informar ao terraform quais as vari\u00e1veis que ser\u00e3o necess\u00e1rias e quais os seus tipos. O arquivo config.tfvars.json ser\u00e1 respons\u00e1vel por informar ao terraform quais os valores que ser\u00e3o utilizados para as vari\u00e1veis. Agora, podemos aplicar a nossa infraestrutura. Para isso, execute o comando terraform apply e informe o arquivo config.tfvars.json como vari\u00e1vel de entrada. terraform apply -var-file=config/config.tfvars.json","title":"Definindo as vari\u00e1veis para o c\u00f3digo:"},{"location":"#criando-a-infraestrutura-de-rede","text":"Agora que j\u00e1 temos a infraestrutura b\u00e1sica criada, podemos come\u00e7ar a criar a infraestrutura de rede. Para isso, iremos criar um arquivo chamado network.tf e nele iremos definir os recursos que ser\u00e3o utilizados para a cria\u00e7\u00e3o da infraestrutura de rede. Para a cria\u00e7\u00e3o de rede, vamos come\u00e7ar a exercitar a pesquisa na documenta\u00e7\u00e3o do terraform. Crie um recurso para cada uma das seguintes funcionalidades e adicione os par\u00e2metros tamb\u00e9m descritos: VPC: cidr_block, instance_tenancy, enable_dns_support, enable_dns_hostnames e tags={Name} Subnet: vpc_id, cidr_block, map_public_ip_on_launch e tags={Name} Internet Gateway: vpc_id e tags={Name} Route Table: vpc_id e tags={Name} Route: route_table_id, destination_cidr_block e gateway_id Route Table Association: subnet_id e route_table_id Para as configura\u00e7\u00f5es de rede, adicione ao arquivo variables.tf as seguintes vari\u00e1veis: variable \"network_configurations\" { type = object ({ vpcCIDRblock = string instanceTenancy = string dnsSupport = bool dnsHostNames = bool publicsCIDRblock = string mapPublicIP = bool publicdestCIDRblock = string }) } E como exemplo, adicione ao arquivo config.tfvars.json as seguintes configura\u00e7\u00f5es: \"network_configurations\" : { \"vpcCIDRblock\" : \"172.16.0.0/16\" , \"instanceTenancy\" : \"default\" , \"dnsSupport\" : true , \"dnsHostNames\" : true , \"publicsCIDRblock\" : \"172.16.10.0/24\" , \"mapPublicIP\" : true , \"publicdestCIDRblock\" : \"0.0.0.0/0\" } O restante das vari\u00e1veis, associe diretamente no arquivo network.tf , utilizando a seguinte estrutura: variavel = [ recurso ].[ nome_do_recurso ].[ vari\u00e1vel_desejada ] # Exemplo: vpc_id = aws_vpc.VPC.id","title":"Criando a Infraestrutura de Rede"},{"location":"#criando-instancias-ec2","text":"A cria\u00e7\u00e3o de inst\u00e2ncias vai nos trazer alguns conceitos extremamente interessantes para a escalabilidade da nossa aplica\u00e7\u00e3o no terraform, s\u00e3o estes: count , for_each , e locals . Vamos come\u00e7ar pelo b\u00e1sico. Crie uma inst\u00e2ncia usando o recurso aws_instance no arquivo instances.tf . Realize o Apply da infraestrutura e veja sua inst\u00e2ncia sendo criada. Utilizando a m\u00f3dulo de output do terraform, crie um output para a inst\u00e2ncia criada. O output deve conter o id da inst\u00e2ncia e o DNS p\u00fablico e estar\u00e1 localizado no arquivo gerado autom\u00e1ticamente terraform.tfstate .","title":"Criando Inst\u00e2ncias EC2"},{"location":"#escalando-com-o-count","text":"Com o argumento count dentro da defini\u00e7\u00e3o do recurso, crie 3 inst\u00e2ncias EC2. Execute o terraform apply e veja as 3 inst\u00e2ncias sendo criadas. O count \u00e9 um sistema de cria\u00e7\u00e3o em massa de inst\u00e2ncias com as mesmas configura\u00e7\u00f5es, e deve ser usado para rapidamente construir um grupo de m\u00e1quinas com as mesmas configura\u00e7\u00f5es para provavelmente a mesma aplica\u00e7\u00e3o. Para possuir maior controle sobre o m\u00faltiplo deploy de inst\u00e2ncias, \u00e9 mais recomendado usar o for_each .","title":"Escalando com o count"},{"location":"#escalando-com-o-for_each","text":"Em primeiro lugar, o for_each ir\u00e1 utilizar da configura\u00e7\u00e3o de vari\u00e1veis no formato de list ou map para criar m\u00faltiplas inst\u00e2ncias com configura\u00e7\u00f5es diferentes. Para isso, vamos criar uma vari\u00e1vel no arquivo variables.tf : variable \"instances_configuration\" { type = list ( object ({ instance_name = string instance_type = string ami = string key_name = string })) } O tipo list indica ao terraform que a vari\u00e1vel \u00e9 uma lista e deve ser percorrida pelo for_each . J\u00e1 o tipo object indica que a vari\u00e1vel \u00e9 um objeto, ou seja, um conjunto de vari\u00e1veis definidas, que podem ser acessadas pela sua chave. No arquivo de vari\u00e0veis .json , deve ser construido os valores da forma descrita acima. O recurso da inst\u00e2ncia com a constru\u00e7\u00e3o do for_each deve ser similar a: resource \"aws_instance\" \"web\" { for_each = { for instance in var.instances_configuration : instance.instance_name = > instance } ami = each.value.ami instance_type = each.value.instance_type subnet_id = aws_subnet.Subnet.id key_name = each.value.key_name tags = { Name = \"${each.value.instance_name}\" } } OBS.: Note que para indicar o valor de cada inst\u00e2ncia \u00e9 usado o complemento each.value Crie 3 inst\u00e2ncias diferentes com este m\u00e9todo.","title":"Escalando com o for_each"},{"location":"#escalando-com-o-for_each-e-count","text":"\u00c9 de certo que n\u00e3o \u00e9 poss\u00edvel usar ambas as configura\u00e7\u00f5es for_each e count no mesmo recurso, mas podemos contornar essa situa\u00e7\u00e3o. Para isso, adicione uma vari\u00e0vel ao conjunto de vari\u00e1veis de configura\u00e7\u00e3o das inst\u00e2ncias que indicar\u00e1 a quantidade delas a serem criadas. Em seguida vamos utilizar as vari\u00e1veis locais , com o argumento locals . Construindo baseado na ideia de replicar a configura\u00e7\u00e3o definida para a quantidade de inst\u00e2ncias, basta criar um for que atenda a essa quantidade e adicione v\u00e1rias vezes a mesma configura\u00e7\u00e3o mudando apenas o nome, com o acr\u00e9scimo de um n\u00famero que indique ind\u00edce, por exemplo. Al\u00e9m disso, para aplicar tais configura\u00e7\u00f5es locais, as informa\u00e7\u00f5es devem ser passadas pela fun\u00e7\u00e3o de flatten . No final, a sua inst\u00e2ncia deve possuir o seguinte formato: locals { serverconfig = [ for srv in var.instances_configuration : [ for i in range ( 1 , srv.no_of_instances + 1 ) : { instance_name = \"${srv.instance_name}-${i}\" instance_type = srv.instance_type ami = srv.ami security_groups_ids = srv.security_groups_ids key_name = srv.key_name } ] ] } locals { instances = flatten ( local.serverconfig ) } resource \"aws_instance\" \"web\" { for_each = { for server in local.instances : server.instance_name = > server } ami = each.value.ami instance_type = each.value.instance_type subnet_id = aws_subnet.Subnet.id vpc_security_group_ids = each.value.security_groups_ids key_name = each.value.key_name tags = { Name = \"${each.value.instance_name}\" } } output \"instances\" { value = [ for instance in aws_instance.web : instance ] description = \"All Machine details\" }","title":"Escalando com o for_each e count"},{"location":"#criando-security-groups","text":"Para a cria\u00e7\u00e3o dos security groups, vamos utilizar o m\u00e9todo do for_each pensando na escalabilidade da solu\u00e7\u00e3o. Al\u00e9m disso, na AWS \u00e9 poss\u00edvel adicionar v\u00e1rias regras tanto de Ingress (Inbound) quanto de Egress (Outbound) ao mesmo tempo, portanto, nossa aplica\u00e7\u00e3o tamb\u00e9m deve conseguir faz\u00ea-lo. Crie o arquivo security_groups.tf e construa as suas configura\u00e7\u00f5es. Dica Para criar m\u00faltiplas regras de Ingress e Egress , utilize vari\u00e1veis do tipo dynamic . Teste criando 2 grupos de seguran\u00e7a, um com uma regra de Ingress e duas regras de Egress e outro com duas regras de Ingress e uma regra de Egress .","title":"Criando Security Groups"},{"location":"#aplicando-o-security-group-nas-instancias","text":"Utilizando a fun\u00e7\u00e3o de output , \u00e9 poss\u00edvel coletar o ID do Security Group definido autom\u00e1ticamente pela AWS. Para atrel\u00e1-lo a uma inst\u00e2ncia use a vari\u00e1vel do recurso aws_instance chamada vpc_security_group_ids e passe uma lista de IDs de Security Groups como valor. Crie um Security Group que libere a conex\u00e3o SSH e associe-o a uma inst\u00e2ncia Junto com o par de chaves criado e associado a key_name , teste o acesso \u00e0 inst\u00e2ncia.","title":"Aplicando o security group nas inst\u00e2ncias"},{"location":"#criando-infraestrutura-para-o-iam","text":"Para a cria\u00e7\u00e3o da estrutura no IAM, ser\u00e3o necess\u00e1rios 2 recursos principais: o usu\u00e1rio em si e as policies (pol\u00edticas ou restri\u00e7\u00f5es) de acesso. Al\u00e9m disso, s\u00e3o necess\u00e1rios recursos que criem o usu\u00e1rio e atrelem a ele uma senha autom\u00e1tica (que pode ser exportada como output ), um recurso que crie o documento da pol\u00edtica, para facilitar a implementa\u00e7\u00e3o, e recursos que criem a conex\u00e3o entre o usu\u00e1rio e a pol\u00edtica. Crie o arquivo policies.tf e construa as suas configura\u00e7\u00f5es. Dica Para atrelar um documento a uma pol\u00edtica, use a seguinte vari\u00e1vel e sua configura\u00e7\u00e3o: policy = data.aws_iam_policy_document.ec2_policy[each.value.name].json Crie o arquivo users.tf e construa as suas configura\u00e7\u00f5es. Associe uma pol\u00edtica criada a um usu\u00e1rio atrav\u00e9s do recurso aws_iam_user_policy_attachment . Dica Crie uma vari\u00e0vel para cada uma das configura\u00e7\u00f5es acima, ou seja, uma vari\u00e1vel para a configura\u00e7\u00e3o de pol\u00edticas, outra para a configura\u00e7\u00e3o de usu\u00e1rios e outra para a configura\u00e7\u00e3o de atrelamento de pol\u00edticas a usu\u00e1rios. Teste a cria\u00e7\u00e3o de um usu\u00e1rio com a restri\u00e7\u00e3o de acesso \u00e0 regi\u00e3o da North Virginia. A pol\u00edtica criada para isso est\u00e1 abaixo: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : \"*\" , \"Resource\" : \"*\" , \"Condition\" : { \"StringEquals\" : { \"aws:RequestedRegion\" : \"us-east-1\" } } } ] }","title":"Criando Infraestrutura para o IAM"},{"location":"#criando-multiplas-regioes","text":"Como os usu\u00e1rios s\u00e3o globais, n\u00e3o vamos nos preocupar com suas configura\u00e7\u00f5es para cada inst\u00e2ncia, eles podem receber sua pasta separada para gerenciamento de infraestrutura. Pensando, ent\u00e3o, nos outros arquivos, ou seja, main.tf , provider.tf , network.tf , instances.tf , security_groups.tf , para criar uma nova regi\u00e3o, basta replicar todo o diret\u00f3rio, mudando apenas no arquivo de configura\u00e7\u00f5es .json a regi\u00e3o do provider . Crie duas pastas com essa infraestrutura, uma para a regi\u00e3o da North Virginia e outra para a regi\u00e3o de Ohio. Teste a cria\u00e7\u00e3o de uma inst\u00e2ncia em cada regi\u00e3o. OBS.: Aplique o comando de init e apply em cada uma das pastas criadas.","title":"Criando m\u00faltiplas Regi\u00f5es"},{"location":"#criando-um-ha-de-servidores-web","text":"","title":"Criando um HA de servidores web"},{"location":"#configurando-uma-imagem-base","text":"Para a cria\u00e7\u00e3o de um HA de servidores web, \u00e9 necess\u00e1rio primeiro criar uma imagem( ami ) que funcionar\u00e1 como template para a cria\u00e7\u00e3o de inst\u00e2ncias caso as m\u00e1quinas base estejam ficando sobre-lotadas. Crie uma inst\u00e2ncia com o sistema operacional Ubuntu Server 18.04 LTS. Aplique: sudo apt update; sudo apt install nodejs build-essential -y Edite um arquivo server.js: #!/usr/bin/env nodejs var http = require ( 'http' ); var os = require ( 'os' ); var crypto = require ( 'crypto' ); http . createServer ( function ( req , res ) { res . writeHead ( 200 , { 'Content-Type' : 'text/plain' }); var nonce = 1 ; var seed = Math . random (); var h = crypto . createHash ( 'sha256' ); h . update ( new Buffer ( nonce + \" Hello World \" + seed )); while ( h . digest ( \"hex\" ). substr ( 0 , 3 ) != '000' ) { h = crypto . createHash ( 'sha256' ); nonce ++ ; h . update ( new Buffer ( nonce + \" Hello World \" + seed )); } res . end ( '{ \"host\": ' + os . hostname () + ', \"nonce\": ' + nonce + '}' ); }). listen ( 8080 , '' ); console . log ( 'Server running at http://localhost:8080/' ); Torne o arquivo execut\u00e1vel: chmod +x ./server.js Execute e teste o servidor(lembre-se de liberar a porta no security group): Configure a m\u00e1quina para iniciar o servidor automaticamente ap\u00f3s reboot : crontab -e\\ @reboot /home/ubuntu/server.js D\u00ea reboot e teste o acesso ao servidor novamente. Copywright O procedimento foi retirado do site oficial da mat\u00e9ria . Com o template de inst\u00e2ncia criado, gere uma imagem dele pela dashboard da AWS e salve a ami gerada para uso no pr\u00f3ximos passos.","title":"Configurando uma Imagem Base"},{"location":"#criando-os-recursos-para-o-ha","text":"Para construir o HA, vamos utilizar o recurso aws_autoscaling_group , emparelhado com aws_launch_configuration e tamb\u00e9m aws_lb ( Load Balence ). Para isso, construa a infraestrutura baseada neste tutorial: Tutorial de HA . Ele foi produzido pela Hashicorp, empresa que desenvolve o Terraform, mas em caso de d\u00favida, o resultado esperado se encontra dentro da pasta sample-HA no reposit\u00f3rio do meu programa. Dicas Crie Security Groups diferentes para o Load Balencer e para configura\u00e7\u00e3o das inst\u00e2ncias. S\u00e3o necess\u00e1rias 3 Subnets para a cria\u00e7\u00e3o do Load Balencer .","title":"Criando os recursos para o HA"},{"location":"#crie-seu-proprio-programa","text":"Com toda a experi\u00eancia adquirida na formata\u00e7\u00e3o, constru\u00e7\u00e3o e manipula\u00e7\u00e3o da infraestrutura por meio do terraform, agora voc\u00ea \u00e9 capaz de criar o seu pr\u00f3rpio programa. Eu criei, utilizando Python , uma ferramenta que roda no terminal e executa as opera\u00e7\u00f5es descritas acima, de forma automatizada. Para isso, a aplica\u00e7\u00e3o copia os arquivos de base, armazenados na pasta sample para uma nova pasta com o nome da regi\u00e3o, configura o arquivo .tvars.json com as informa\u00e7\u00f5es descritas pelo usu\u00e1rio e executa o terraform para a cria\u00e7\u00e3o da infraestrutura. O seu programa pode ser criado via Python ou qualquer outra linguagem que voc\u00ea se sinta confort\u00e1vel para manipula\u00e7\u00e3o de arquivos e execu\u00e7\u00e3o de comandos. \u00c9 poss\u00edvel, tamb\u00e9m, que essas configura\u00e7\u00f5es sejam feitas via backend e toda a interface de usu\u00e1rio seja feita via frontend em outra linguagem, uma vez que toda a configura\u00e7\u00e3o da infraestrutura pode ser enviada via .json para o backend. Aqui o c\u00e9u \u00e9 o limite! Use a sua criatividade!","title":"Crie seu Pr\u00f3prio Programa."},{"location":"#motivacao","text":"Minha motiva\u00e7\u00e3o para a cria\u00e7\u00e3o desta aplica\u00e7\u00e3o e, consequentemente, este tutorial veio da crescente vontade de aprender sobre infraestrutura e Computa\u00e7\u00e3o Nuvem, o que me motivou a tentar produzir algo robusto e confi\u00e1vel, que pudesse ser utilizado por pessoas com algum conhecimento em infraestrutura, assim como eu, mas com a vontade de aprender.","title":"Motiva\u00e7\u00e3o"}]}